module gamelib.mouse;

import gamelib.all;
import dxlib.all;

/// ボタン入力(On,Offで管理)
class DigitalInput(T){
private:
    const int _count_init = -100000;
    int _count = _count_init;
    int _last_count = _count_init;
package:
    this(){
        _count = _count_init;        //最初は押されていない状態
        _last_count = _count_init;        //最初は押されていない状態
    }
protected:
    ///##@brief キーのチェックとcountの増加を行う
    ///@attention 毎フレーム呼ぶこと
    ///@param[in] is_push:bool
    void set(bool is_push){
        this._last_count = this._count;
        if(_count >= 0){    //前回押されていた
            if(is_push){
                this._count += 1;
            }else{
                this._count = -1;
            }
        }else if(this._count < 0){    //前回離されていた
            if(is_push){
                this._count = 1;
            }else{
                this._count += -1;
            }
        }
    }
public:
    void update(T);
    ///@brief 押されているかどうか調べる
    ///@return bool 押されているならTrue,離されているならFalse
    const pure bool is_press(){
        return _count > 0;
    }
    ///@brief 押された瞬間かどうか調べる
    ///@return bool 押された瞬間ならTrue,そうでなければFalse
    const pure bool is_down(){
        return _count == 1;
    }
    ///@brief 離された瞬間かどうか調べる
    ///@return bool 離された瞬間ならTrue,そうでなければFalse
    const pure bool is_up(){
        return _count == -1;
    }
    ///@brief 押された瞬間または離された瞬間かどうか、つまりキーの状態が変化した瞬間か調べる
    ///@return bool キーの状態が変化した瞬間ならTrue,そうでなければFalse
    const pure bool is_change(){
        return is_down() || is_up();
    }
    /// カウンタ取得
    const pure int count(){
        return _count;
    }
    /// 一瞬前のカウントを取得
    const pure int last_count(){
        return _last_count;
    }
    /// カウンタ設定
    void count(int count){
        _count = count;
    }
    /// カウンタのリセット
    void reset(){
        _count = _count_init;
    }
}
/// マウスのボタンの種類
enum MouseButtonType{
    left    = MOUSE_INPUT_LEFT, /// 左ボタン
    middle  = MOUSE_INPUT_MIDDLE, /// ホイールボタン
    right   = MOUSE_INPUT_RIGHT, /// 右ボタン
    button4 = MOUSE_INPUT_4, ///マウス４ボタン
    button5 = MOUSE_INPUT_5, ///マウス５ボタン
    button6 = MOUSE_INPUT_6, ///マウス６ボタン
    button7 = MOUSE_INPUT_7, ///マウス７ボタン
    button8 = MOUSE_INPUT_8, ///マウス８ボタン
}
/// マウスボタン用インプット管理
class MouseButton : DigitalInput!(Mouse){
protected:
    MouseButtonType _button;
package:
    this(MouseButtonType button){
        this._button = button;
    }
    override void update(Mouse mouse){
        super.set(mouse.get(this._button));
    }
}
/// マウスのカーソル位置を管理するクラス
class MousePosition{
protected:
    RingStack!(Vector) _pos;
package:
    this(int num = 10){
        this._pos = new RingStack!(Vector)(num);
    }
    void update(Mouse mouse){
        this._pos.push(mouse.pos);
    }
public:
    /// ある瞬間の位置を取得
    Vector pos(int time = 0){
        return _pos[time];
    }
    /// ある瞬間の速度を取得
    Vector vel(int time = 0){
        if(time+1 >= this._pos.depth){
            return vecpos(0,0);
        }else{
            return (this.pos(time) - this.pos(time+1));
        }
    }
    /// スタックの深さ
    int depth(){
        return this._pos.depth;
    }
}
/// マウスのホイールがどれだけ回されたか管理するクラス
class MouseWheel{
protected:
    RingStack!(int) _rot;
package:
    this(int num = 10){
        this._rot = new RingStack!(int)(num);
    }
    void update(Mouse mouse){
        this._rot.push(mouse.wheel);
    }
public:
    /// ある瞬間の回転量を取得
    int rot(int time = 0){
        return this._rot[time];
    }
    /// ある瞬間からの回転量の合計を取得
    int sum(int time = 1){
        int res = 0;
        for(int i=0; i<time; i++){
            res += this.rot(time);
        }
        return res;
    }
    /// スタックの深さ
    int depth(){
        return this._rot.depth;
    }
}

/// マウスデータとdxlibのインプットをつなぐクラス
class Mouse{
protected:
    int _dxclick; /// 今のマウスボタンの状態updateによって更新される
    int _dxwheel; /// 今のマウスホイールの状態updateによって更新される
public:
    /// マウスの位置を取得
    Vector pos(){
        int x,y;
        dx_GetMousePoint(&x, &y);
        return Vector(x,y);
    }
    /// マウスカーソルのx軸位置を取得
    int x(){
        int x;
        dx_GetMousePoint(&x, null);
        return x;
    }
    /// マウスカーソルのy軸位置を取得
    int y(){
        int y;
        dx_GetMousePoint(null, &y);
        return y;
    }
    /// マウスカーソルの位置を指定
    void pos(int x, int y){
        dx_SetMousePoint(x,y);
    }
    /// マウスカーソルの位置を指定
    void pos(IntVector p){
        this.pos(p.x,p.y);
    }
    /// マウスカーソルの位置を指定
    void pos(Vector p){
        this.pos(cast(int)p.x,cast(int)p.y);
    }
    /// マウスカーソルの位置を指定
    void x(int val){
        this.pos(val, this.y);
    }
    /// マウスカーソルの位置を指定
    void y(int val){
        this.pos(this.x, val);
    }
    /// マウスカーソルを表示するかどうか設定
    void visible(bool val){
        dx_SetMouseDispFlag(val);
    }
    /// マウスカーソルが表示されているかどうか取得
    bool visible(){
        return 0!=dx_GetMouseDispFlag();
    }
    /// マウスボタンの状態を取得
    bool get(MouseButtonType val){
        return (val & this._dxclick) != 0;
    }
    /// 左ボタンが押されているかどうか
    bool left(){
        return this.get(MouseButtonType.left);
    }
    /// 右ボタンが押されているかどうか
    bool right(){
        return this.get(MouseButtonType.right);
    }
    /// ホイールボタンが押されているかどうか
    bool middle(){
        return this.get(MouseButtonType.middle);
    }
    /// 4ボタンが押されているかどうか
    bool button4(){
        return this.get(MouseButtonType.button4);
    }
    /// 5ボタンが押されているかどうか
    bool button5(){
        return this.get(MouseButtonType.button5);
    }
    /// 6ボタンが押されているかどうか
    bool button6(){
        return this.get(MouseButtonType.button6);
    }
    /// 7ボタンが押されているかどうか
    bool button7(){
        return this.get(MouseButtonType.button7);
    }
    /// 8ボタンが押されているかどうか
    bool button8(){
        return this.get(MouseButtonType.button8);
    }
    /// ホイールの回転量を取得
    int wheel(){
        return this._dxwheel;
    }
    /// データ更新
    /// 毎フレーム呼ぶのが良い
    package void update(){
        this._dxclick = dx_GetMouseInput();
        this._dxwheel = dx_GetMouseWheelRotVol();
    }
}
